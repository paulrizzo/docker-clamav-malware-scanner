#!/bin/bash

# Check if the environment value is provided as a command-line argument
if [ $# -ne 2 ]; then
    echo -e "Usage: $0 <env> <service_account_name>"
    echo -e "Possible values for <env> are: [dev, pre-qa, qa, stg, prod]"
    exit 1
fi

# Set the environment value from the command-line argument
env_value="$1"
service_account_name="$2"
unscanned_bucket_name="dapi-files-$env_value-unscanned"
region="us-central1"
location="us"
service_name="$env_value-malware-scanner"

gcloud run deploy "$service_name" \
  --source . \
  --region "$region" \
  --ingress="internal" \
  --timeout=1200 \
  --set-env-vars "ENV=$env_value"\
  --no-allow-unauthenticated \
  --memory 4Gi \
  --cpu 2 \
  --concurrency 20 \
  --min-instances 1 \
  --max-instances 8 \
  --no-cpu-throttling \
  --cpu-boost \
  --service-account="$service_account_name"

trigger_name="trigger-$service_name"
trigger_exists=$(gcloud eventarc triggers list --location=$location | grep $trigger_name | wc -l)
if [ $trigger_exists -eq 0 ]; then
  echo -e "Eventarc trigger not found, creating now..."
  gcloud eventarc triggers create "$trigger_name" \
    --destination-run-service="$service_name" \
    --destination-run-region="$region" \
    --location=$location \
    --event-filters="type=google.cloud.storage.object.v1.finalized" \
    --event-filters="bucket=$unscanned_bucket_name" \
    --service-account="$service_account_name"

  subscription_name=$(gcloud eventarc triggers describe \
      "$trigger_name" \
      --location=$location \
      --format="get(transport.pubsub.subscription)")
  gcloud pubsub subscriptions update "$subscription_name" --ack-deadline=120
fi

echo -e "Finished! ðŸŽ‰"
